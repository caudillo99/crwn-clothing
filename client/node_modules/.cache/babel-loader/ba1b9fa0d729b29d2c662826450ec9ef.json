{"ast":null,"code":"import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport { auth, createUserProfileDocument, googleProvider } from \"../../firebase/firebase.utils\";\nimport { googleSignInFailure, googleSignInSuccess } from \"./user.actions\";\nimport userActionsTypes from \"./user.types\";\n/* ======== Sign in with google account method ======== */\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionsTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n/* ======== Sign in with email method ======== */\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(user); //yield call(createUserProfileDocument, user);\n  } catch (error) {}\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionsTypes.EMAIL_SIGN_IN_START);\n}\nexport default function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/diego/Documents/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","createUserProfileDocument","googleProvider","googleSignInFailure","googleSignInSuccess","userActionsTypes","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","console","log","onEmailSignInStart","EMAIL_SIGN_IN_START","userSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,0BAA3C;AACA,SACEC,IADF,EAEEC,yBAFF,EAGEC,cAHF,QAIO,+BAJP;AAKA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,gBAAzD;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AAEA;;AAEA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACQ,eAAL,CAAqBN,cAArB,CAAvB;AACA,UAAMO,OAAO,GAAG,MAAMV,IAAI,CAACE,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CACPO,mBAAmB,CAAC;AAAEQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADZ,CAAT;AAGD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACM,mBAAmB,CAACW,KAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMnB,UAAU,CAACS,gBAAgB,CAACW,oBAAlB,EAAwCV,gBAAxC,CAAhB;AACD;AAED;;AAEA,OAAO,UAAUW,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ,EAFE,CAGF;AACD,GAJD,CAIE,OAAOO,KAAP,EAAc,CAAE;AACnB;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACpC,QAAM5B,UAAU,CAACS,gBAAgB,CAACoB,mBAAlB,CAAhB;AACD;AAED,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACgB,mBAAD,CAAL,EAA4BhB,IAAI,CAACyB,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport {\n  auth,\n  createUserProfileDocument,\n  googleProvider,\n} from \"../../firebase/firebase.utils\";\nimport { googleSignInFailure, googleSignInSuccess } from \"./user.actions\";\nimport userActionsTypes from \"./user.types\";\n\n/* ======== Sign in with google account method ======== */\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(\n      googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n    );\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionsTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n/* ======== Sign in with email method ======== */\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(user);\n    //yield call(createUserProfileDocument, user);\n  } catch (error) {}\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionsTypes.EMAIL_SIGN_IN_START);\n}\n\nexport default function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}