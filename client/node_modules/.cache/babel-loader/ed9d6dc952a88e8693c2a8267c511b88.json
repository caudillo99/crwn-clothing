{"ast":null,"code":"import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport { auth, createUserProfileDocument, getCurrentUser, googleProvider } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from \"./user.actions\";\nimport userActionsTypes from \"./user.types\";\n/* ======== Sign in with google account method ======== */\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionsTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n/* ======== Sign in with email method ======== */\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionsTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionsTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionsTypes.SIGN_OUT_START, signOut);\n}\nexport function* signUp({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDocument(user, {\n      displayName\n    });\n    yield put(signUpSuccess(user));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionsTypes.SIGN_UP_START, signUp);\n}\nexport default function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/home/diego/Documents/crwn-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","createUserProfileDocument","getCurrentUser","googleProvider","signInFailure","signInSuccess","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","userActionsTypes","signInWithGoogle","user","signInWithPopup","getSnapshotFromUserAuth","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","userAuth","userRef","userSnapshot","get","id","data","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","userSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport {\n  auth,\n  createUserProfileDocument,\n  getCurrentUser,\n  googleProvider,\n} from \"../../firebase/firebase.utils\";\nimport {\n  signInFailure,\n  signInSuccess,\n  signOutFailure,\n  signOutSuccess,\n  signUpFailure,\n  signUpSuccess,\n} from \"./user.actions\";\nimport userActionsTypes from \"./user.types\";\n\n/* ======== Sign in with google account method ======== */\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionsTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n/* ======== Sign in with email method ======== */\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionsTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionsTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(userActionsTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* signUp({ payload: { displayName, email, password } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDocument(user, { displayName });\n    yield put(signUpSuccess(user));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(userActionsTypes.SIGN_UP_START, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}